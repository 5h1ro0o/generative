{"ast":null,"code":"const BASE_URL = '/api';\n\n// Fonction utilitaire pour gérer les réponses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    // On récupère le message d'erreur du serveur si disponible\n    try {\n      const errorData = await response.json();\n      throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\n    } catch (e) {\n      throw new Error(`Erreur HTTP: ${response.status}`);\n    }\n  }\n  return response.json();\n};\n\n// Fonction utilitaire pour les requêtes fetch\nconst fetchWithConfig = async (endpoint, options = {}) => {\n  const defaultHeaders = {\n    'Content-Type': 'application/json'\n    // Ajoutez ici d'autres headers par défaut si nécessaire\n  };\n  const config = {\n    ...options,\n    headers: {\n      ...defaultHeaders,\n      ...options.headers\n    }\n  };\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, config);\n    return handleResponse(response);\n  } catch (error) {\n    console.error(`Erreur API (${endpoint}):`, error);\n    throw new Error(error.message || 'Erreur de connexion au serveur');\n  }\n};\nconst api = {\n  // Produits\n  getProducts: async () => {\n    console.log('Fetching products...');\n    try {\n      const data = await fetchWithConfig('/products');\n      console.log('Products received:', data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      throw error;\n    }\n  },\n  getProductById: productId => fetchWithConfig(`/products/${productId}`),\n  // Panier\n  getCart: (userId = '123456') => fetchWithConfig(`/cart/user/${userId}`),\n  addToCart: (productId, quantity, userId = '123456') => fetchWithConfig('/cart', {\n    method: 'POST',\n    body: JSON.stringify({\n      productId,\n      quantity,\n      userId\n    })\n  }),\n  removeFromCart: itemId => fetchWithConfig(`/cart/${itemId}`, {\n    method: 'DELETE'\n  }),\n  // Fonction utilitaire pour vérifier la connexion à l'API\n  checkConnection: async () => {\n    try {\n      const response = await fetch(`${BASE_URL}/products`);\n      const data = await response.json();\n      console.log('API Connection test:', data);\n      return response.ok;\n    } catch (error) {\n      console.error('API Connection error:', error);\n      return false;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["BASE_URL","handleResponse","response","ok","errorData","json","Error","message","status","e","fetchWithConfig","endpoint","options","defaultHeaders","config","headers","fetch","error","console","api","getProducts","log","data","getProductById","productId","getCart","userId","addToCart","quantity","method","body","JSON","stringify","removeFromCart","itemId","checkConnection"],"sources":["C:/Users/matte/Desktop/Cours_B3/generative/projet 1/ecommerce-app/frontend/src/utils/api.js"],"sourcesContent":["const BASE_URL = '/api';\r\n\r\n// Fonction utilitaire pour gérer les réponses\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    // On récupère le message d'erreur du serveur si disponible\r\n    try {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || `Erreur HTTP: ${response.status}`);\r\n    } catch (e) {\r\n      throw new Error(`Erreur HTTP: ${response.status}`);\r\n    }\r\n  }\r\n  return response.json();\r\n};\r\n\r\n// Fonction utilitaire pour les requêtes fetch\r\nconst fetchWithConfig = async (endpoint, options = {}) => {\r\n  const defaultHeaders = {\r\n    'Content-Type': 'application/json',\r\n    // Ajoutez ici d'autres headers par défaut si nécessaire\r\n  };\r\n\r\n  const config = {\r\n    ...options,\r\n    headers: {\r\n      ...defaultHeaders,\r\n      ...options.headers,\r\n    },\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(`${BASE_URL}${endpoint}`, config);\r\n    return handleResponse(response);\r\n  } catch (error) {\r\n    console.error(`Erreur API (${endpoint}):`, error);\r\n    throw new Error(error.message || 'Erreur de connexion au serveur');\r\n  }\r\n};\r\n\r\nconst api = {\r\n  // Produits\r\n  getProducts: async () => {\r\n    console.log('Fetching products...');\r\n    try {\r\n      const data = await fetchWithConfig('/products');\r\n      console.log('Products received:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  getProductById: (productId) => \r\n    fetchWithConfig(`/products/${productId}`),\r\n\r\n  // Panier\r\n  getCart: (userId = '123456') => \r\n    fetchWithConfig(`/cart/user/${userId}`),\r\n\r\n  addToCart: (productId, quantity, userId = '123456') => \r\n    fetchWithConfig('/cart', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ productId, quantity, userId })\r\n    }),\r\n\r\n  removeFromCart: (itemId) => \r\n    fetchWithConfig(`/cart/${itemId}`, {\r\n      method: 'DELETE'\r\n    }),\r\n\r\n  // Fonction utilitaire pour vérifier la connexion à l'API\r\n  checkConnection: async () => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/products`);\r\n      const data = await response.json();\r\n      console.log('API Connection test:', data);\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('API Connection error:', error);\r\n      return false;\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}